[%
import "../utils.eol";

	var nombreClase = Modulo.getNombreClase();
	var paquete = Paquete;
    
    var daos = Arq!Dao.all;
    var stringServicio=Arq!Accion.all.at(0).paquete.replace('co.gov.dian.muisca.','').replace('acciones.','');
   
    
%]

/**
 * Republica de Colombia
 * Copyright (c) 2019 Dirección de Impuestos y Aduanas Nacionales.
 * (DIAN - www.dian.gov.co).  Todos los Derechos reservados.
 *
 * $Header:$
 */
package co.gov.dian.muisca.[%=Modulo.nombre.toLowerCase()%].web.servlets;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import co.gov.dian.muisca.arquitectura.general.delegados.DBusDelegateFactory;
import co.gov.dian.muisca.arquitectura.general.excepcion.DExcepcion;
import co.gov.dian.muisca.arquitectura.general.excepcion.DSeguridadExcepcion;
import co.gov.dian.muisca.arquitectura.interfaces.IDBusAccionesDelegate;
import co.gov.dian.muisca.arquitectura.interfaces.IDBusDelegateFactory;
import co.gov.dian.muisca.arquitectura.interfaces.IDComando;
import co.gov.dian.muisca.arquitectura.interfaces.implgenerica.comandos.DComandoAccion;
import co.gov.dian.muisca.arquitectura.web.buses.DAccesoSeguridad;
import co.gov.dian.muisca.arquitectura.web.buses.DContextoSeguridad;
import [%=paquete.replace("dao","general.to")%].*;
import [%=paquete.replace("dao","acciones")%].*;

import co.gov.dian.muisca.automatizacion.buses.DBusAccionesDelegateAUTTxNueva;

/**
 * <p>Titulo: Proyecto MUISCA</p>
 * <p>Descripcion: Cervlet para pruebas de [%=nombreClase%].</p>
 * <p>Copyright: Copyright (c) 2019</p>
 * <p>Company: DIAN</p>
 *
 * @author 
 * @version 
 * <pre>
 
 * </pre>
 */
 
 public class ServletTest extends HttpServlet { 
 
 /**
	 * 
	 */
	private static final long serialVersionUID = -4227816447245462992L;
	
	private static final String CONTENT_TYPE = "text/html";
    public static final int COD_TIPO_MENSAJE = 12;
    public static final int COD_SUBTIPO_MENSAJE = 12;

    private static Logger logger = Logger.getLogger(ServletTest.class);

    //Initialize global variables
    public void init() throws ServletException {
    }

    //Process the HTTP Get request
    public void doGet(HttpServletRequest request, HttpServletResponse response) throws
            ServletException, IOException {
    	try {    		
    		InputStream in = request.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(in);
            
           
            // Leer la acción
            String oper = (String) ois.readObject();
            
            
	        String operacion = request.getParameter("operacion");
	        
	        if(operacion == null) {
	        	operacion = oper;
	        }
	        
	        ObjectOutputStream miOut = new ObjectOutputStream(response.getOutputStream());
	        [%
	        for(d in daos) {
		
		%]
		
			if ("crear[%=d.nombre.firstToUpperCamelCase()%]".equalsIgnoreCase(operacion)) {
	        	D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%] = (D[%=d.nombre.firstToUpperCamelCase()%]TO)ois.readObject();
	            crear[%=d.nombre.firstToUpperCamelCase()%](to[%=d.nombre.firstToUpperCamelCase()%]);
	            D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]Consultado = consultar[%=d.nombre.firstToUpperCamelCase()%](to[%=d.nombre.firstToUpperCamelCase()%].getPK());
	            miOut.writeObject(to[%=d.nombre.firstToUpperCamelCase()%]Consultado);	            
	        } 
	        if ("consultar[%=d.nombre.firstToUpperCamelCase()%]".equalsIgnoreCase(operacion)) {
	        	D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%] = (D[%=d.nombre.firstToUpperCamelCase()%]TO)ois.readObject();
	            D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]Consultado = consultar[%=d.nombre.firstToUpperCamelCase()%](to[%=d.nombre.firstToUpperCamelCase()%].getPK());
	            miOut.writeObject(to[%=d.nombre.firstToUpperCamelCase()%]Consultado);	            
	        } 
	        if ("actualizar[%=d.nombre.firstToUpperCamelCase()%]".equalsIgnoreCase(operacion)) {
	        	D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%] = (D[%=d.nombre.firstToUpperCamelCase()%]TO)ois.readObject();
	        	actualizar[%=d.nombre.firstToUpperCamelCase()%](to[%=d.nombre.firstToUpperCamelCase()%]);
	            D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]Consultado = consultar[%=d.nombre.firstToUpperCamelCase()%](to[%=d.nombre.firstToUpperCamelCase()%].getPK());
	            miOut.writeObject(to[%=d.nombre.firstToUpperCamelCase()%]Consultado);	            
	        } 
	        if ("eliminar[%=d.nombre.firstToUpperCamelCase()%]".equalsIgnoreCase(operacion)) {
	        	D[%=d.nombre.firstToUpperCamelCase()%]PKTO pk[%=d.nombre.firstToUpperCamelCase()%] = (D[%=d.nombre.firstToUpperCamelCase()%]PKTO)ois.readObject();
	        	eliminar[%=d.nombre.firstToUpperCamelCase()%](pk[%=d.nombre.firstToUpperCamelCase()%]);
	            D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]Consultado = consultar[%=d.nombre.firstToUpperCamelCase()%](pk[%=d.nombre.firstToUpperCamelCase()%]);
	            miOut.writeObject(to[%=d.nombre.firstToUpperCamelCase()%]Consultado);	            
	        }
		[%
	}
    
%] 
	        miOut.flush();
            miOut.close();
	        
	        response.setContentType(CONTENT_TYPE);
        
    	} catch (Exception ex) {
    		ex.printStackTrace();
    	}
    }

   public void doPost(HttpServletRequest request, HttpServletResponse response)
   throws ServletException, IOException {
       doGet(request, response);
   }


 [%
	        for(d in daos) {
		
		%]
		       
    private D[%=d.nombre.firstToUpperCamelCase()%]TO crear[%=d.nombre.firstToUpperCamelCase()%](D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]) throws DExcepcion {
    	DCmdAccCrear[%=d.nombre.firstToUpperCamelCase()%] accion = (DCmdAccCrear[%=d.nombre.firstToUpperCamelCase()%])getAccion("[%=stringServicio%].DCmdAccCrear[%=d.nombre.firstToUpperCamelCase()%]", getAccesoSeguridad(), true);
    	System.out.println("to[%=d.nombre.firstToUpperCamelCase()%]-->"+to[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.inicializar(to[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.ejecutar();
    	return null;
    }
   
    private D[%=d.nombre.firstToUpperCamelCase()%]TO consultar[%=d.nombre.firstToUpperCamelCase()%](D[%=d.nombre.firstToUpperCamelCase()%]PKTO pk[%=d.nombre.firstToUpperCamelCase()%]) throws DExcepcion {
    	DCmdAccCons[%=d.nombre.firstToUpperCamelCase()%] accion = (DCmdAccCons[%=d.nombre.firstToUpperCamelCase()%])getAccion("[%=stringServicio%].DCmdAccCons[%=d.nombre.firstToUpperCamelCase()%]", getAccesoSeguridad(), true);
    	System.out.println("pk[%=d.nombre.firstToUpperCamelCase()%]-->"+pk[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.inicializar(pk[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.ejecutar();
    	return accion.get[%=d.nombre.firstToUpperCamelCase()%]();    	
    	
    }
    
    private D[%=d.nombre.firstToUpperCamelCase()%]TO actualizar[%=d.nombre.firstToUpperCamelCase()%](D[%=d.nombre.firstToUpperCamelCase()%]TO to[%=d.nombre.firstToUpperCamelCase()%]) throws DExcepcion {
    	DCmdAccAct[%=d.nombre.firstToUpperCamelCase()%] accion = (DCmdAccAct[%=d.nombre.firstToUpperCamelCase()%])getAccion("[%=stringServicio%].DCmdAccAct[%=d.nombre.firstToUpperCamelCase()%]", getAccesoSeguridad(), true);
    	    	System.out.println("to[%=d.nombre.firstToUpperCamelCase()%]-->"+to[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.inicializar(to[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.ejecutar();
    	return null;
    }
    
    private D[%=d.nombre.firstToUpperCamelCase()%]TO eliminar[%=d.nombre.firstToUpperCamelCase()%](D[%=d.nombre.firstToUpperCamelCase()%]PKTO pk[%=d.nombre.firstToUpperCamelCase()%]) throws DExcepcion {
    	DCmdAccElim[%=d.nombre.firstToUpperCamelCase()%] accion = (DCmdAccElim[%=d.nombre.firstToUpperCamelCase()%])getAccion("[%=stringServicio%].DCmdAccElim[%=d.nombre.firstToUpperCamelCase()%]", getAccesoSeguridad(), true);
    	System.out.println("pk[%=d.nombre.firstToUpperCamelCase()%]-->"+pk[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.inicializar(pk[%=d.nombre.firstToUpperCamelCase()%]);
    	accion.ejecutar();
    	return null;
    }
    
 [%
	}
    
%]
    public DComandoAccion getAccion(String unNombreAccion) throws DExcepcion {
    	//DBusAccionesDelegateArq delegado = new DBusAccionesDelegateArq();
    	DBusAccionesDelegateAUTTxNueva delegado = new DBusAccionesDelegateAUTTxNueva();
    	//delegado.setSubsistemaInvocador("informacionextranjera");
		return (DComandoAccion)delegado.getComando(unNombreAccion);
    }
    
    public DComandoAccion getAccion(String unNombreAccion,
			DContextoSeguridad ctx, boolean isTransaccional) throws DExcepcion {
		IDComando miComando;
		IDBusDelegateFactory fac = DBusDelegateFactory.getInstance();
		try {
			IDBusAccionesDelegate miDelegado = fac
					.getDelegadoAcciones(unNombreAccion);
			miDelegado.setContextoSeguridad(ctx);
			miComando = (IDComando) miDelegado.getComando(unNombreAccion,
					isTransaccional);

		} catch (DExcepcion ex) {
			logger.error("Error..getAccion", ex);
			throw ex;
		} catch (Exception ex) {
			logger.error("Error..getAccion", ex);
			throw new DExcepcion(ex);
		}

		return (DComandoAccion) miComando;
	}
    
    private DContextoSeguridad getAccesoSeguridad() throws DExcepcion  {
    	DAccesoSeguridad miAccesoSeguridad = new DAccesoSeguridad();
        DContextoSeguridad ctxSeguridad;
		try {
			ctxSeguridad = miAccesoSeguridad.autenticarUsuario("13000074337297","Prueba2006".getBytes("UTF-8"), 1);
		} catch (DSeguridadExcepcion e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new DExcepcion(e); 
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new DExcepcion(e);
		} catch (DExcepcion e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new DExcepcion(e);
		}        
        return ctxSeguridad;
    }
}

 
 [%
 operation Arq!Modulo getNombreClase() : String {
     var retorno = self.nombre.substring(0,1).toUpperCase();
  	 if (self.nombre.indexOf("_") > 0) {
  	 	retorno = "";
	  	for (t in self.nombre.toLowerCase.split("_")) {
	  	  	retorno += t.substring(0,1).toUpperCase() + t.substring(1);
	  	}
  	 } else {
  	 	retorno += self.nombre.substring(1).toLowerCase();
  	 }
    return retorno;
  }	
  
  operation Arq!Dao getNombreClase() : String {
     var retorno = self.nombre.substring(0,1).toUpperCase();
  	 if (self.nombre.indexOf("_") > 0) {
  	 	retorno = "";
	  	for (t in self.nombre.toLowerCase.split("_")) {
	  	  	retorno += t.substring(0,1).toUpperCase() + t.substring(1);
	  	}
  	 } else {
  	 	retorno += self.nombre.substring(1).toLowerCase();
  	 }
    return retorno;
  }	
 %]