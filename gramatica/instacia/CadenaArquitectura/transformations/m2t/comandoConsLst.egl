[% import "../utils.eol"; 
var nombreClase=clase.nombreClase;
var paqueteTO=clase.detalle.select(c|c.isTypeOf(Arq!To)).first().paquete;
%]
/**
 * Republica de Colombia
 * Copyright (c) 2021 Dirección de Impuestos y Aduanas Nacionales.
 * (DIAN - www.dian.gov.co).  Todos los Derechos reservados.
 *
 * $Header:$
 */
package [%= clase.paquete %];

import java.util.*;

import [%=paqueteTO%].*;
import co.gov.dian.muisca.arquitectura.general.excepcion.*;
import co.gov.dian.muisca.arquitectura.interfaces.*;
import co.gov.dian.muisca.arquitectura.interfaces.implgenerica.comandos.*;

/**
 * <p>Titulo: Proyecto MUISCA</p>
 * <p>Descripcion: Comando de [%=tipoComando%] utilizado para consultar objetos [%=nombreClase%].</p>
 * <p>Copyright: Copyright (c) 2021</p>
 * <p>Company: DIAN</p>
 *
 * @author Nelson Hurtado
 * @version $Revision:$
 * <pre>
 * $Log[10]:$
 * </pre>
 */
public class [%=nomPrefijo%][%=nombreClase%] extends DComando[%=tipoComando%] {
	private static final long serialVersionUID = -1235430177L;
	 
	public static final int CONSULTA_GENERICA = 1;
	[%		//tipo operacion por fks
		var text="public static final int CONSULTAR_POR_";
		var cont=2;
		var lstPTKTos=new Set;
		var lstMetodosPTKTos=new Set;
		var lstCaseValidacion=new OrderedSet;
		var lstAsignar=new Set;
		var lstCtrl=new Set;
		var strLstTipoOper=new OrderedSet;
			
		
		for(to in clase.detalle.select(c|c.isTypeOf(Arq!To)).asOrderedSet()) 
		{		
		//Arq!ModoCombo	
			var lst=to.att.atributos.select(a|a.isModoCombo() and a.anotaciones.select(an|an.isTypeOf(ModoCombo)).first.args <> null);
			var lstPks=to.pk.atributos.select(a|a.isModoCombo() and a.anotaciones.select(an|an.isTypeOf(ModoCombo)).first.args <> null);
			var strLst=lst.collect(a|text+a.getNomClaseRefModoCombo()+'='+(cont++)).concat("; \n \t \t");	
			
			for(a in lst){
				var nombreTablaRef = a.getNomClaseRefModoCombo();
				var nameUpperCamelCase=nombreTablaRef.firstToUpperCamelCaseClase();
				var claseReferencia = Arq!To.all.select(n | n.nombre = nombreTablaRef).first();
				var nombreClaseReferencia = claseReferencia.nombreClase;
				var pksForanea = Arq!PkTo.all.select(n | n.nombre = nombreTablaRef).first();
				
				//nameUpperCamelCase.println("nameUpperCamelCase----->");
				
				if(nombreClaseReferencia=""){
					continue;
				}
				if(not lstCtrl.includes(nombreClaseReferencia)){
					strLstTipoOper.add(text+nombreClaseReferencia.toUpperCase()+"=" + cont.toString() +";");
					cont++;
					lstCtrl.add(nombreClaseReferencia);
					
						//add objetos pk fk
					lstPTKTos.add("/** Llave primaria de "+nombreClaseReferencia+" */\n\tprotected D"+nombreClaseReferencia+'PKTO pk'+nombreClaseReferencia);
						// inicializar por fks
					lstMetodosPTKTos.add("/**\n \t\t * Inicializa la consulta por "+nombreClaseReferencia+". \n\t * @param pk"+nombreClaseReferencia+
						" Llave primaria de "+nombreClaseReferencia+" \n \t */\n"+
					 "\tpublic void inicializarConsultarPor"+nombreClaseReferencia
					 +"(D"+nombreClaseReferencia+"PKTO pk"+nombreClaseReferencia+
					 ") { \n \t  tipoOperacion = CONSULTAR_POR_"+nombreClaseReferencia.toUpperCase()+";\n \t  this.pk"+nombreClaseReferencia+" = pk"+
					 nombreClaseReferencia+";\n \t 	this.objetos"+nombreClase+"= null;\n \t}"
					 );
					 //case para swich
					 lstCaseValidacion.add("case CONSULTAR_POR_"+nombreClaseReferencia.toUpperCase()+":\n\t\t"
							+"\t\tparametros.put(this.getClass().getName()+\":validar:pk"+nombreClaseReferencia+"\",pk"+nombreClaseReferencia+");\n");						
					for(pkf in pksForanea.atributos.asOrderedSet()) 
					{	
						lstCaseValidacion.add("\t\tparametros.put(this.getClass().getName()+\":validar:pk"+nombreClaseReferencia+".get"+pkf.nombre.firstToUpperCamelCase()+"()\",pk"+nombreClaseReferencia+".get"+pkf.nombre.firstToUpperCamelCase()+"());\n");
					}
					
					lstCaseValidacion.add("\t\tbreak;");		
					lstAsignar.add("copia.pk"+nombreClaseReferencia+"=pk"+nombreClaseReferencia+";\n");
				}	
				
			}
			
			for(a in lstPks){
				var nombreTablaRef = a.getNomClaseRefModoCombo();
				var nameUpperCamelCase=nombreTablaRef.firstToUpperCamelCaseClase();
				var claseReferencia = Arq!To.all.select(n | n.nombre = nombreTablaRef).first();
				var nombreClaseReferencia = claseReferencia.nombreClase;
				var pksForanea = Arq!PkTo.all.select(n | n.nombre = nombreTablaRef).first();
				
				//nameUpperCamelCase.println("nameUpperCamelCase----->");
				
				if(nombreClaseReferencia=""){
					continue;
				}
				if(not lstCtrl.includes(nombreClaseReferencia)){
					strLstTipoOper.add(text+nombreClaseReferencia.toUpperCase()+"=" + cont.toString() +";");
					cont++;
					lstCtrl.add(nombreClaseReferencia);
					//add objetos pk fk
					lstPTKTos.add("/** Llave primaria de "+nombreClaseReferencia+" */ \n\tprotected D"+nombreClaseReferencia+'PKTO pk'+nombreClaseReferencia);
						// inicializar por fks
					lstMetodosPTKTos.add("/**\n\t * Inicializa la consulta por "+nombreClaseReferencia+". \n \t * @param pk"+nombreClaseReferencia+
						" Llave primaria de "+nombreClaseReferencia+" \n \t */\n"+
					 "\tpublic void inicializarConsultarPor"+nombreClaseReferencia
					 +"(D"+nombreClaseReferencia+"PKTO pk"+nombreClaseReferencia+
					 ") { \n \t  tipoOperacion = CONSULTAR_POR_"+nombreClaseReferencia.toUpperCase()+";\n \t  this.pk"+nombreClaseReferencia+" = pk"+
					 nombreClaseReferencia+";\n \t 	this.objetos"+nombreClase+"= null;\n \t}"
					 );
					 //case para swich
					 lstCaseValidacion.add("case CONSULTAR_POR_"+nombreClaseReferencia.toUpperCase()+":\n\t\t"
							+"\t\t parametros.put(this.getClass().getName()+\":validar:pk"+nombreClaseReferencia+"\",pk"+nombreClaseReferencia+");\n");						
					for(pkf in pksForanea.atributos.asOrderedSet()) 
					{	
						lstCaseValidacion.add("\t\t parametros.put(this.getClass().getName()+\":validar:pk"+nombreClaseReferencia+".get"+pkf.nombre.firstToUpperCamelCase()+"()\",pk"+nombreClaseReferencia+".get"+pkf.nombre.firstToUpperCamelCase()+"());\n");
					}
					
					lstCaseValidacion.add("\t\t break;");		
					lstAsignar.add("copia.pk"+nombreClaseReferencia+"=pk"+nombreClaseReferencia+";\n");					
				}
								
			}
			%]		
				
		[%
		}	
		%]
	
	[%=strLstTipoOper.concat("\t \t")%]
	
	[%=lstPTKTos.concat("; \n \t \t")%] [% if(lstPTKTos.size()>0){%];[%}%]

	protected D[%=nombreClase%]TO to[%=nombreClase%];

	/** Tipo de operación de consulta */
	protected int tipoOperacion = -1;
	/** Colección de objetos D[%=nombreClase%]TO */
	protected Collection<D[%=nombreClase%]TO> objetos[%=nombreClase%];
		
	[%=lstMetodosPTKTos.concat("; \n \t \t")%]
	

	/**
	 * Inicializa la consulta genérica de [%=nombreClase%].
	 * @param att[%=nombreClase%] Atributos de [%=nombreClase%]
	 */
	public void inicializarConsultaGenerica(D[%=nombreClase%]TO to[%=nombreClase%]) {
		tipoOperacion = CONSULTA_GENERICA;
		this.to[%=nombreClase%] = to[%=nombreClase%];
	}

	/**
	 * Devuelve la colección de objetos [%=nombreClase%] que se hayan consultado.
	 * @return Un Collection con objetos D[%=nombreClase%]TO
	 */
	public Collection<D[%=nombreClase%]TO> getColeccion[%=nombreClase%]() {
		return objetos[%=nombreClase%];
	}

	/**
	 * Ejecuta el comando de [%=tipoComando%].
	 * @throws DExcepcion Si ocurre algún error al realizar la
	 * la consulta de [%=nombreClase%]
	 */
	[%
	if(tipoComando='Accion'){
	%]
	protected void ejecutarComando(){
		throw new UnsupportedOperationException();
	}
		[%
	}else{
	%]
	protected void ejecutarComando() throws DExcepcion {
		throw new UnsupportedOperationException();
	}
	[%
	}
	%]

	/**
	 * Obtiene una copia (clon) del comando.
	 * @return Un Object con la copia del comando
	 */
	public Object clonar() {
		return new [%=nomPrefijo%][%=nombreClase%]();
	}

	/**
	 * Indica si el comando es auditable.
	 * @return true si el comando es auditable; false de lo contrario
	 */
	public boolean isAuditable() {
		return true;
	}

	/**
	 * Obtiene la descripción del comando.
	 * @return Un String con la descripción del comando
	 */
	public String getDescripcion() {
		return "Permite consultar objetos [%=nombreClase%]";
	}

	/**
	 * Método para validar los parámetros inicializados, invocado
	 * previamente a la ejecución del comando.
	 * @return true si los paretros son váidos; false de lo contrario
	 * @throws DValidarExcepcion Si los parámetros no son válidos
	 */
	public boolean validar() throws DValidarExcepcion {
		Map<String, Object> parametros=new HashMap<String, Object>();
		switch (tipoOperacion) {			
			[%=lstCaseValidacion.concat(" \n \t \t")%]
			case CONSULTA_GENERICA:
				parametros.put(this.getClass().getName()+":validar:to[%=nombreClase%]",to[%=nombreClase%]);
				break;

			default:
				throw new DValidarExcepcion(getMensajeGeneral("la consulta", "de objetos [%=nombreClase%]"), getMensajeOperInvalida());
		}
		validarParametros("Listar",parametros);
		return true;
	}

	/**
	 * Para copiar el contenido del comando actual al comando enviado como parámetro.
	 * @param comando Comando sobre el cual copiar
	 */
	public void asignar(IDComando comando) {
		if (comando instanceof [%=nomPrefijo%][%=nombreClase%]) {
			[%=nomPrefijo%][%=nombreClase%] copia = ([%=nomPrefijo%][%=nombreClase%]) comando;
			copia.tipoOperacion = tipoOperacion;
			[%=lstAsignar.concat("\t \t")%]
			copia.objetos[%=nombreClase%] = objetos[%=nombreClase%];
			copia.to[%=nombreClase%] = to[%=nombreClase%];
		}
	}
}
