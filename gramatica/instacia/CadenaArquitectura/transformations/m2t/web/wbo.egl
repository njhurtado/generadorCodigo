[% 
import "../../utils.eol";
var nombreWbo=wbo.nombreClase;
var atribs = Arq!AttTo.all.select(n | n.nombre = wbo.nombre).first();
var pkes = Arq!PkTo.all.select(n | n.nombre = wbo.nombre).first();
var to = Arq!To.all.select(n | n.nombre = wbo.nombre).first();
var accion = Arq!Accion.all.select(n | n.nombre = wbo.nombre).first();
var stringServicio=accion.paquete.replace('co.gov.dian.muisca.','').replace('acciones.','');
 

var lstAtts=atribs.atributos.select(a|a.isModoCombo());
var lstPks=pkes.atributos.select(a|a.isModoCombo());
%]
/**
 * Republica de Colombia
 * Copyright (c) 2021 Dirección de Impuestos y Aduanas Nacionales.
 * (DIAN - www.dian.gov.co).  Todos los Derechos reservados.
 *
 * $Header:$
 */
package [%= wbo.paquete %];

import co.gov.dian.muisca.arquitectura.general.excepcion.DExcepcion;
import co.gov.dian.muisca.arquitectura.general.web.DWbo;
import co.gov.dian.muisca.arquitectura.web.jsf.componentes.DMensajeFaces;
import co.gov.dian.muisca.arquitectura.web.jsf.util.DResolutorBinding;

import [%=accion.paquete%].DCmdAccCrear[%=accion.nombreClase%];
import [%=accion.paquete%].DCmdAccAct[%=accion.nombreClase%];
import [%=accion.paquete%].DCmdAccElim[%=accion.nombreClase%];
import [%=accion.paquete%].DCmdAccConsLst[%=accion.nombreClase%];

import javax.annotation.PostConstruct;
import javax.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

/**
 * <p>Title: D[%=nombreWbo%]WBO</p>
 *
 * <p>Description: Define los campos requeridos para crear, consultar, eliminar o actualizar [%=nombreWbo%]</p>
 *
 * <p>Copyright: Copyright (c) 2021</p>
 *
 * <p>Company: Direccion de Impuestos y Aduanas Nacionales</p>
 *
 * @author 
 * @version 1.0
 */

public class D[%=nombreWbo%]WBO extends  DWbo {

	private static Logger logger = Logger.getLogger( D[%=nombreWbo%]WBO.class );
	private D[%=nombreWbo%]TO to[%=nombreWbo%];
	
	private Collection<D[%=nombreWbo%]TO> col[%=nombreWbo%];
    private Collection<D[%=nombreWbo%]PKTO> col[%=nombreWbo%]Seleccionados;
      
	 
	[%		
	 //SelectItem - atts
	for(lstAtt in lstAtts) 
	{	
			var tipo = lstAtt.tipo.toType();
			var nombre = lstAtt.nombre.firstToLowerCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){		
	%]
	private List<SelectItem> [%=nombre%]List;		
	[%
	}	}	 
	 %]
	 
	 [%		
	 //SelectItem  - pks
	for(lstPk in lstPks) 
	{	
			var tipo = lstPk.tipo.toType();
			var nombre = lstPk.nombre.firstToLowerCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){		
	%]
	private List<SelectItem> [%=nombre%]List;		
	[%
	}	}	 
	 %]
	  
    @PostConstruct
    public void init( ) {
    	this.to[%=nombreWbo%] = new D[%=nombreWbo%]TO();
    }
    
    /**
	 * Constructor
	 */
    public D[%=nombreWbo%]WBO( ) {
        
    }
    
    /**
	 * Método que crea objetos de tipo [%=nombreWbo%]
	 */
    public void crear[%=nombreWbo%]( ) {

        logger.debug( "************  Crear [%=nombreWbo%] WBO ***********************" );
        try {
        	DCmdAccCrear[%=nombreWbo%] accCrear[%=nombreWbo%] = (DCmdAccCrear[%=nombreWbo%])getAccion("[%=stringServicio%].DCmdAccCrear[%=nombreWbo%]"); 
            accCrear[%=nombreWbo%].inicializar(this.to[%=nombreWbo%]);
            accCrear[%=nombreWbo%].ejecutar();
	
			administrarMensaje(logger,
            		MSG_BUNDLE,
                               "mensaje_creado_con_exito", null,
                               DMensajeFaces.COD_TIPO_CORRECTO);
        }
        catch( DExcepcion unaExcepcion) {

            unaExcepcion.printStackTrace();
            administrarMensaje(logger, unaExcepcion.getCodigo(),
                               DMensajeFaces.COD_TIPO_ERROR,
                               unaExcepcion.getMessage(),
                               unaExcepcion.getMensajeDetallado());
        }

    }
    
    /**
	 * Método que actualiza objetos de tipo [%=nombreWbo%]
	 */
	public void actualizar[%=nombreWbo%]( ) {

        logger.debug( "************  Actualizar [%=nombreWbo%] WBO ***********************" );
        try {
        	DCmdAccAct[%=nombreWbo%] accAct[%=nombreWbo%] = (DCmdAccAct[%=nombreWbo%])getAccion("[%=stringServicio%].DCmdAccAct[%=nombreWbo%]"); 
            accAct[%=nombreWbo%].inicializar(this.to[%=nombreWbo%]);
            accAct[%=nombreWbo%].ejecutar();
	
			administrarMensaje(logger,
            		MSG_BUNDLE,
                               "mensaje_actualizado_con_exito", null,
                               DMensajeFaces.COD_TIPO_CORRECTO);
        }
        catch( DExcepcion unaExcepcion) {

            unaExcepcion.printStackTrace();
            administrarMensaje(logger, unaExcepcion.getCodigo(),
                               DMensajeFaces.COD_TIPO_ERROR,
                               unaExcepcion.getMessage(),
                               unaExcepcion.getMensajeDetallado());
        }

    }
    
    /**
	 * Método que elimina objetos de tipo [%=nombreWbo%]
	 */
	public void eliminar[%=nombreWbo%]( ) {

        logger.debug( "************  Eliminar [%=nombreWbo%] WBO ***********************" );
        try {
        	DCmdAccElim[%=nombreWbo%] accElim[%=nombreWbo%] = (DCmdAccElim[%=nombreWbo%])getAccion("[%=stringServicio%].DCmdAccElim[%=nombreWbo%]"); 
            accElim[%=nombreWbo%].inicializar(this.to[%=nombreWbo%]);
            accElim[%=nombreWbo%].ejecutar();
	
			administrarMensaje(logger,
            		MSG_BUNDLE,
                               "mensaje_eliminado_con_exito", null,
                               DMensajeFaces.COD_TIPO_CORRECTO);
        }
        catch( DExcepcion unaExcepcion) {

            unaExcepcion.printStackTrace();
            administrarMensaje(logger, unaExcepcion.getCodigo(),
                               DMensajeFaces.COD_TIPO_ERROR,
                               unaExcepcion.getMessage(),
                               unaExcepcion.getMensajeDetallado());
        }
    }
    
    /**
	 * Método que consulta objetos de tipo [%=nombreWbo%]
	 */
	public void consultar[%=nombreWbo%]( ) {

        logger.debug( "************  Consultar [%=nombreWbo%] WBO ***********************" );
        try {
        	DCmdAccConsLst[%=nombreWbo%] accConsLst[%=nombreWbo%] = (DCmdAccConsLst[%=nombreWbo%])getAccion("[%=stringServicio%].DCmdAccConsLst[%=nombreWbo%]"); 
            accConsLst[%=nombreWbo%].inicializarConsultaGenerica(this.to[%=nombreWbo%]);
            accConsLst[%=nombreWbo%].ejecutar();
    		this.col[%=nombreWbo%] = accConsLst[%=nombreWbo%].getColeccion[%=nombreWbo%]();			
        }
        catch( DExcepcion unaExcepcion) {

            unaExcepcion.printStackTrace();
            administrarMensaje(logger, unaExcepcion.getCodigo(),
                               DMensajeFaces.COD_TIPO_ERROR,
                               unaExcepcion.getMessage(),
                               unaExcepcion.getMensajeDetallado());
        }

    }
    
    
    [%		
	 //SelectItem - atts
	for(lstAtt in lstAtts) 
	{	
			var tipo = lstAtt.tipo.toType();
			var nombre = lstAtt.nombre.firstToLowerCamelCase();
			var nombreUpper =lstAtt.nombre.firstToUpperCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){		
	%]
	
	/**
	 	* Devuelve el valor de [%=nombre%].
	 	* @return Un objeto List<SelectItem>
	 	*/
		public List<SelectItem> get[%=nombreUpper%]List (){
			return [%=nombre%]List;
		}
		/**
		 * Establece el valor de [%=nombre%]ist.
		 * @param [%=nombre%]List El nuevo valor de [%=nombre%]List
		 */
		public void set[%=nombreUpper%]List(List<SelectItem> [%=nombre%]List) {
			this.[%=nombre%]List = [%=nombre%]List;
		}
	
	
	
	[%
	}	}	 
	 %]
	 
	[%		
	 //SelectItem - lstPk
	for(lstPk in lstPks) 
	{	
			var tipo = lstPk.tipo.toType();
			var nombre = lstPk.nombre.firstToLowerCamelCase();
			var nombreUpper =lstPk.nombre.firstToUpperCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){		
	%]
	
	/**
	 	* Devuelve el valor de [%=nombre%].
	 	* @return Un objeto List<SelectItem>
	 	*/
		public List<SelectItem> get[%=nombreUpper%]List (){
			return [%=nombre%]List;
		}
		/**
		 * Establece el valor de [%=nombre%]ist.
		 * @param [%=nombre%]List El nuevo valor de [%=nombre%]List
		 */
		public void set[%=nombreUpper%]List(List<SelectItem> [%=nombre%]List) {
			this.[%=nombre%]List = [%=nombre%]List;
		}
		
	
	[%
	}	}	 
	 %]
	 
    /**
    *Retorna obejto D[%=nombreWbo%]TO
    **/
    public [%=nombreWbo%]TO get[%=nombreWbo%]TO(){
    	if(this.to[%=nombreWbo%] == null) {
    		this.to[%=nombreWbo%] = new D[%=nombreWbo%]TO();
    	}
    	return this.to[%=nombreWbo%];
    }
    
    /**
     *	Retorna una coleccion de objetos D[%=nombreWbo%]TO
     **/
    public Collection<D[%=nombreWbo%]TO> getCol[%=nombreWbo%]() {
		
		return col[%=nombreWbo%];
	}
	
	/**
     *	Fija el valor de col[%=nombreWbo%]
     **/
	public void setCol[%=nombreWbo%](
			Collection<D[%=nombreWbo%]TO> col[%=nombreWbo%]) {
		this.col[%=nombreWbo%] = col[%=nombreWbo%];
	}
	
	/**
     *	Retorna una coleccion de objetos D[%=nombreWbo%]PKTO
     **/
	public Collection<D[%=nombreWbo%]PKTO> getCol[%=nombreWbo%]Seleccionados() {
		if(col[%=nombreWbo%]Seleccionados == null) {
			col[%=nombreWbo%]Seleccionados = new ArrayList<D[%=nombreWbo%]PKTO>();
		}
		return col[%=nombreWbo%]Seleccionados;
	}
	
	/**
     *	Fija el valor de col[%=nombreWbo%]Seleccionados
     **/
	public void setCol[%=nombreWbo%]Seleccionados(
			Collection<D[%=nombreWbo%]PKTO> col[%=nombreWbo%]Seleccionados) {
		this.col[%=nombreWbo%]Seleccionados = col[%=nombreWbo%]Seleccionados;
	}
    
	
}