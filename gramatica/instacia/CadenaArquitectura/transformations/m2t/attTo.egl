[% import "../utils.eol"; %]
/**
 * Republica de Colombia
 * Copyright (c) 2021 Dirección de Impuestos y Aduanas Nacionales.
 * (DIAN - www.dian.gov.co).  Todos los Derechos reservados.
 *
 * $Header:$
 */
package [%= clase.paquete %];

import co.gov.dian.muisca.arquitectura.general.to.IDTO;
import org.apache.commons.lang.builder.*;


/**
 * <p>Titulo: Proyecto MUISCA</p>
 * <p>Descripcion: Objeto de transporte para los atributos de [%= clase.nombreClase %].</p>
 * <p>Copyright: Copyright (c) 2021</p>
 * <p>Company: DIAN</p>
 *
 * @author user
 * @version $Revision:$
 * <pre>
 * $Log[10]:$
 * </pre>
 */
public class D[%= clase.nombreClase %]AttTO implements IDTO {
		private static final long serialVersionUID = -1231029142L; 

	// Atributos
	[%		//todas los atributos excepto pks
		var atts=new OrderedSet;
		var setAtts=new OrderedSet;
		for(att in clase.atributos.asOrderedSet()) 
		{	
			var tipo = att.getType();
			var nombre = att.nombre.firstToLowerCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){
				atts.add(tipo +' '+nombre);
				setAtts.add('set'+att.nombre.firstToUpperCamelCase()+'('+nombre+')');
				%]
		private [%=tipo%] [%=nombre%];		
				[%
			}
	
		}	
	%]
	
	/**
	 * Construye un nuevo D[%= clase.nombreClase %]AttTO por defecto.
	 */
	public D[%= clase.nombreClase %]AttTO() { }

	/**
	 * Construye un nuevo D[%= clase.nombreClase %]AttTO con los atributos.
	 [%		//todas los atributos excepto pks
		
		for(att in clase.atributos.asOrderedSet()) 
		{	
			var type = att.getType();
			var nombre = att.nombre.firstToLowerCamelCase();
	%]
		* @param [%=nombre%] [%=type%];
	[%
		}	
	%]
	 */
	public D[%= clase.nombreClase %]AttTO([%=atts.concat(",")%]) {
		[%=setAtts.concat(";\n \t \t")%];
	}
	
	
	
	 [%		//gets y sets
		
		for(att in clase.atributos.asOrderedSet()) 
		{	
			var type = att.getType();
			var nombre = att.nombre.firstToLowerCamelCase();
			var nombreUpper =att.nombre.firstToUpperCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){
	%]
	/**
 	 * Devuelve el valor de [%=nombre%].
 	 * @return Un objeto [%=type%] 
 	 */
	public [%=type%] get[%=nombreUpper%] (){
		return [%=nombre%];
	}
	
	/**
	 * Establece el valor de [%=nombre%].
	 * @param [%=nombre%] El nuevo valor de [%=nombre%]
	 */
	public void set[%=nombreUpper%]([%=type%] [%=nombre%]) {
		this.[%=nombre%] = [%=nombre%];
	}
		
	[%
			}
		}	
	%]
	
	/**
	 * Devuelve una representación en String del objeto.
	 * @return String
	 */
	public String toString() {
		ToStringBuilder builder = new ToStringBuilder(this);
		
		 [%		//gets y sets
		
		for(att in clase.atributos.asOrderedSet()) 
		{	
			var type = att.getType();
			var nombre = att.nombre.firstToLowerCamelCase();
			var nombreUpper =att.nombre.firstToUpperCamelCase();
			if(nombre<>"nivLectura" and nombre<>"nivEscritura" and nombre<>"ideUuid"){
	%]
		builder.append("[%=nombre%]", get[%=nombreUpper%]());
	[%
	}
		}	
	%]
		return builder.toString();
	}
		
}
