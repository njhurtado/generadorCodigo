[%

import "../utils.eol";

	var nombreClase = Dao.nombreClase;	
	var atribs = Arq!AttTo.all.select(n | n.nombre = Dao.nombre).first();
	var pkes = Arq!PkTo.all.select(n | n.nombre = Dao.nombre).first();
	
	var unTo = Arq!`To`.all.first();
  	var paqueteTo = unTo.paquete;
	
	//atts.println(); 
  
		var atts=new OrderedSet;
		var pks=new OrderedSet;
		var attsPuntos=new OrderedSet;
		var pksPuntos=new OrderedSet;
		var setAtts=new OrderedSet;
		var attsUpdate=new OrderedSet;
		var pksUpdate=new OrderedSet;
		var lstPTKTos=new Set;
		var lstMetodosPTKTos=new Set;
		var lstCaseValidacion=new Set;
		var lstCaseConsultasPorFk=new Set;
		var lstCaseConsultar=new Set;
		var lstMetodosConsultar=new Set;
		
		for(att in atribs.atributos.asOrderedSet()) 
		{	
			var nombre = att.nombre;			
			if(nombre<>"NIV_LECTURA" and nombre<>"NIV_ESCRITURA" and nombre<>"IDE_UUID"){
				atts.add(nombre);
				attsPuntos.add(":"+nombre);
				attsUpdate.add(nombre+"=:"+nombre);
			}
			for(pk in pkes.atributos.asOrderedSet()) 
			{	
				pks.add(pk.nombre);	
				pksPuntos.add(":"+pk.nombre);
				pksUpdate.add(pk.nombre+"=:"+pk.nombre);					
			}
			if(att.isModoCombo()) {
				var nameUpperCamelCase=att.getNomClaseRefModoComboCamelCase();
				var nombreTablaRef = att.getNomClaseRefModoCombo();
				if(nameUpperCamelCase <> ""){
					//add objetos pk fk
					if( ('pk'+nameUpperCamelCase)<>('pk'+nombreClase))
					lstPTKTos.add("/** Llave primaria de "+nameUpperCamelCase+" */ \n \t protected D"+nameUpperCamelCase+'PKTO pk'+nameUpperCamelCase);
						// inicializar por fks
					lstMetodosPTKTos.add("/**\n * Inicializa la consulta por "+nameUpperCamelCase+". \n \t* @param pk"+nameUpperCamelCase+
						" Llave primaria de "+nameUpperCamelCase+" \n \t*/\n"+
					 "\t public void inicializarConsultarPor"+nameUpperCamelCase
					 +"(D"+nameUpperCamelCase+"PKTO pk"+nameUpperCamelCase+
					 ") { \n \t  tipoOperacion = CONSULTAR_POR_"+att.getNomClaseRefModoCombo()+";\n \t  this.pk"+nameUpperCamelCase+" = pk"+
					 nameUpperCamelCase+";\n \t 	objetos"+nombreClase+"= null;\n \t}"
					 );
					 //opcion para validacion
					 lstCaseValidacion.add("if (tipoOperacion == CONSULTAR_POR_"+att.getNomClaseRefModoCombo()+") {\n"
						+"\t\t parametros.put(this.getClass().getName()+\":validar:pk"+nameUpperCamelCase+"\",pk"+nameUpperCamelCase+");\n"
						+"\t\t parametros.put(this.getClass().getName()+\":validar:pk"+nameUpperCamelCase+".getIde"+nameUpperCamelCase+"()\",pk"+nameUpperCamelCase+".getIde"+nameUpperCamelCase+"());\n"
						+"\t\t }");
						
						var pksForanea = Arq!PkTo.all.select(n | n.nombre = nombreTablaRef).first();
						var lstPksForanea=new OrderedSet;
						var lstSentenciasForanea=new OrderedSet;
						for(pk in pksForanea) 
						{	
							lstPksForanea.add(pk.nombre+"=:"+pk.nombre);
							lstSentenciasForanea.add("\t\t sentencia.setBigInteger(\""+nombre+"\","+"pk"+nameUpperCamelCase+".getIde"+pk.nombre.firstToUpperCamelCase()+"());\n");					
						}
						
					lstCaseConsultasPorFk.add("case CONSULTAR_POR_"+att.getNomClaseRefModoCombo()+":\n"
					+"\t\t\t\t sql.append(\"select * from "+Dao.nombre + "\")\n"
					+"\t\t\t\t .append(\" where "+lstPksForanea.concat(" and ")+"\");\n"
					+"\t\t\t\t m.put(\"sentencia1\", sql.toString());\n"
					+"\t\t\t\t break;\n");
					
					lstCaseConsultar.add("case CONSULTAR_POR_"+att.getNomClaseRefModoCombo()+":\n"
					+"\t\t\t\t return consultarPor"+nameUpperCamelCase + "();");
					
					lstMetodosConsultar.add("\t/**\n \t* Consulta por "+nameUpperCamelCase+". \n \t* @return Un IDDataSet con la colecciÃ³n de registros encontrados" +
						" \n \t* @throws SQLException Si ocurre un error de base de datos al consultar "+" \n \t*/\n"+
					 "\tprivate IDDataSet consultarPor"+nameUpperCamelCase + "() throws SQLException { \n" +
					 "\t\t DSentenciaSQL sentencia = getSentenciaSQLPreparada(\"sentencia1\");\n" + lstSentenciasForanea.concat(" ") +
					 "\t\t sentencia.ejecutar();\n \t\t DDataSet resultado = sentencia.getDataSet();\n \t\t cargarObjetos"+nombreClase+"(resultado);\n \t\t return resultado; \n"+
					 "\t}"
					 );
				}
			}				
		}			
%]

/**
 * Republica de Colombia
 * Copyright (c) 2021 Dirección de Impuestos y Aduanas Nacionales.
 * (DIAN - www.dian.gov.co).  Todos los Derechos reservados.
 *
 * $Header:$
 */
package  [%=Dao.paquete%].impl.oracle;

import java.util.*;
import [%=paqueteTo%].*;
import java.sql.*;
import java.util.*;
import co.gov.dian.muisca.arquitectura.general.excepcion.*;
import co.gov.dian.muisca.arquitectura.general.persistencia.dao.*;
import co.gov.dian.muisca.arquitectura.interfaces.*;
import co.gov.dian.muisca.arquitectura.interfaces.implgenerica.dataset.*;
import co.gov.dian.muisca.arquitectura.mensajes.*;
import [%=Dao.paquete%].IDDAO[%=nombreClase%];
import co.gov.dian.muisca.arquitectura.general.persistencia.dao.DDAO;


/**
 * <p>Titulo: Proyecto MUISCA</p>
 * <p>Descripcion: Objeto de acceso a datos para [%=nombreClase%].</p>
 * <p>Copyright: Copyright (c) 2021</p>
 * <p>Company: DIAN</p>
 *
 * @author 
 * @version 
 * <pre>
 
 * </pre>
 */
 
 public class  DDAO[%=nombreClase%] extends DDAO implements IDDAO[%=nombreClase%] {
 
 /** colección de objetos D[%=nombreClase%]TO */
	private Collection<D[%=nombreClase%]TO> objetos[%=nombreClase%];
	/** Objeto de transporte de [%=nombreClase%] */
	private D[%=nombreClase%]TO to[%=nombreClase%];
	/** Llave primaria de [%=nombreClase%] */
	private D[%=nombreClase%]PKTO pk[%=nombreClase%];
	/** Atributos de [%=nombreClase%] */
	private D[%=nombreClase%]AttTO att[%=nombreClase%];
	
	[%=lstPTKTos.concat("; \n \t \t")%];
 
 /**
	 * Inicializa la consulta por llave primaria.
	 * @param pk[%=nombreClase%] Llave primaria de [%=nombreClase%]
	 */
	public void inicializarConsultarPorPK(D[%=nombreClase%]PKTO pk[%=nombreClase%]) {
		setTipoOperacion(CONSULTAR_POR_PK);
		this.pk[%=nombreClase%] = pk[%=nombreClase%];
	}

	/**
	 * Inicializa la creaciónn de [%=nombreClase%].
	 * @param to[%=nombreClase%] Objeto de Transporte de [%=nombreClase%]
	 */
	public void inicializarCrear(D[%=nombreClase%]TO to[%=nombreClase%]) {
		setTipoOperacion(CREAR);
		this.to[%=nombreClase%] = to[%=nombreClase%];
		if (to[%=nombreClase%] != null) {
			pk[%=nombreClase%] = this.to[%=nombreClase%].getPK();
			att[%=nombreClase%] = this.to[%=nombreClase%].getAtt();
		}
	}

	/**
	 * Inicializa la actualización de [%=nombreClase%].
	 * @param to[%=nombreClase%] Objeto de Transporte de [%=nombreClase%]
	 */
	public void inicializarActualizar(D[%=nombreClase%]TO to[%=nombreClase%]) {
		setTipoOperacion(ACTUALIZAR);
		this.to[%=nombreClase%] = to[%=nombreClase%];
		if (to[%=nombreClase%] != null) {
			pk[%=nombreClase%] = this.to[%=nombreClase%].getPK();
			att[%=nombreClase%] = this.to[%=nombreClase%].getAtt();
		}
	}

	/**
	 * Inicializa la eliminación de [%=nombreClase%].
	 * @param pk[%=nombreClase%] Llave primaria de [%=nombreClase%]
	 */
	public void inicializarEliminar(D[%=nombreClase%]PKTO pk[%=nombreClase%]) {
		setTipoOperacion(ELIMINAR);
		this.pk[%=nombreClase%] = pk[%=nombreClase%];
	}

	/**
	 * Inicializa la consulta genérica de [%=nombreClase%].
	 * @param att[%=nombreClase%] Atributos de [%=nombreClase%]
	 */
	public void inicializarConsultaGenerica(D[%=nombreClase%]TO to[%=nombreClase%]) {
		setTipoOperacion(CONSULTA_GENERICA);
		this.to[%=nombreClase%] = to[%=nombreClase%];
		if (to[%=nombreClase%] != null) {
			pk[%=nombreClase%] = this.to[%=nombreClase%].getPK();
			att[%=nombreClase%] = this.to[%=nombreClase%].getAtt();
		}
	}
	
	[%=lstMetodosPTKTos.concat("; \n \t \t")%]
 
 	/**
	 * Devuelve las sentencias sql a ejecutar, dependiendo del tipo de operación a realizar.
	 * @return Un Map de Strings con la relación de sentencias sql
	 */
	public Map<String, String> getSentenciasSQL() {
		Map<String, String> m = new HashMap<String, String>();
		StringBuffer sql = new StringBuffer();
		switch (getTipoOperacion()) {
			case CREAR:
				sql.append("insert into [%=Dao.nombre%]")
					.append(" ([%=pks.concat(",")%],[%=atts.concat(",")%])")
					.append(" VALUES ([%=pksPuntos.concat(",")%],[%=attsPuntos.concat(",")%])");
				m.put("sentencia1", sql.toString());
				break;
			case ACTUALIZAR:
				sql.append("update [%=Dao.nombre%]")
					.append(" set [%=attsUpdate.concat(",")%]")
					.append(" where [%=pksUpdate.concat(",")%]");
				m.put("sentencia1", sql.toString());
				break;
			case ELIMINAR:
				sql.append("delete from [%=Dao.nombre%]")
					.append(" where [%=pksUpdate.concat(",")%]");
				m.put("sentencia1", sql.toString());
				break;
			case CONSULTAR_POR_PK:
				sql.append("select * from [%=Dao.nombre%]")
					.append(" where [%=pksUpdate.concat(",")%]");
				m.put("sentencia1", sql.toString());
				break;
			case CONSULTA_GENERICA:
				sql.append("select * from [%=Dao.nombre%] where ")
					.append(generarFiltroGenerico());
				m.put("sentencia1", sql.toString());
				break;
		    [%=lstCaseConsultasPorFk.concat("; \n \t \t")%]
		}
		return m;
	}


	/**
	 * obtenerConsultaGenerica
	 *
	 * @return StringBuffer
	 */
	private String generarFiltroGenerico() {
		StringBuffer condiciones = new StringBuffer();
		String y = " AND ";
		boolean append = false;

		if (pk[%=nombreClase%] != null) {
			[%for(att in pks) {%]
			if (pk[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]() != null) {
				if (append) {
					condiciones.append(y);
				}
				condiciones.append("[%=att%]=:[%=att%]");
				append = true;
			}[%}%]
		}

		if (att[%=nombreClase%] != null) {
			[%for(att in atts) {%]
			if (att[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]() != null) {
				if (append) {
					condiciones.append(y);
				}
				condiciones.append("[%=att%]=:[%=att%]");
				append = true;
			}
			[%}%]
		}

		return condiciones.toString();
	}

	/**
	 * Asigna los valores no nulos de un objeto.
	 * @param unaSentencia Sentencia para asignación
	 * @throws SQLException Si ocurre un error al asignar los valores
	 */
	private void asignarValoresGenericos(DSentenciaSQL unaSentencia) throws SQLException {
		if (pk[%=nombreClase%] != null) {
			[%
			for(att in pkes.atributos.asOrderedSet()) {				
			%]
			if (pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]() != null) {
				[% if (att.getType() = "java.lang.String") {%]
				unaSentencia.setString("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Integer") {%]
				unaSentencia.setInt("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Long") {%]
				unaSentencia.setLong("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigInteger") {%]
				unaSentencia.setBigInteger("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Double") {%]
				unaSentencia.setDouble("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigDecimal") {%]
				unaSentencia.setBigDecimal("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Date") {%]
				unaSentencia.setDate("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Timestamp") {%]
				unaSentencia.setTimestamp("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%}%]
			}[%}%]
		}

		if (att[%=nombreClase%] != null) {
			[%
			for(att in atribs.atributos.asOrderedSet()) 
			{	
				
			%]
			[% if (att.nombre<>"NIV_LECTURA" and att.nombre<>"NIV_ESCRITURA" and att.nombre<>"IDE_UUID") {%]
			if (att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]() != null) {							
				[% if (att.getType() = "java.lang.String") {%]
				unaSentencia.setString("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Integer") {%]
				unaSentencia.setInt("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Long") {%]
				unaSentencia.setLong("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigInteger") {%]
				unaSentencia.setBigInteger("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Double") {%]
				unaSentencia.setDouble("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigDecimal") {%]
				unaSentencia.setBigDecimal("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Date") {%]
				unaSentencia.setDate("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Timestamp") {%]
				unaSentencia.setTimestamp("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%}%]
			}
			[%}}%]											
		}		
	}

	/**
	 * Guarda los datos de [%=nombreClase%].
	 * @return @return Un int con el número de registros guardados
	 * @throws SQLException Si ocurre un error de base de datos al guardar
	 */
	public int guardar() throws SQLException {
		switch (getTipoOperacion()) {
			case CREAR:
				return crear();
			case ACTUALIZAR:
				return actualizar();
		}
		return -1;
	}

	/**
	 * Elimina registros de [%=nombreClase%].
	 * @return Un int con el número de registros eliminados
	 * @throws SQLException Si ocurre un error de base de datos al eliminar
	 */
	public int eliminar() throws SQLException {
		DSentenciaSQL sentencia = getSentenciaSQLPreparada("sentencia1");
		asignarValoresPK(sentencia);
		sentencia.ejecutar();
		return sentencia.getRegistrosAfectados();
	}

	/**
	 * Consulta los datos de [%=nombreClase%].
	 * @return Un IDDataSet con la colección de registros encontrados
	 * @throws SQLException Si ocurre un error de base de datos al consultar
	 */
	public IDDataSet consultar() throws SQLException {
		switch (getTipoOperacion()) {
			case CONSULTAR_POR_PK:
				return consultarPorPK();
			case CONSULTA_GENERICA:
				return consultaGenerica();
			[%=lstCaseConsultar.concat("; \n \t \t")%]
		}
		return null;
	}

	/**
	 * Crea un registro de [%=nombreClase%].
	 * @return Un int con el número de registros creados
	 * @throws SQLException Si ocurre un error de base de datos al crear
	 */
	private int crear() throws SQLException {
		DSentenciaSQL sentencia = getSentenciaSQLPreparada("sentencia1");
		asignarValoresObjeto(sentencia);
		asignarValoresPK(sentencia);
		sentencia.ejecutar();
		int resultado = sentencia.getRegistrosAfectados();
		if (resultado <= 0) {
			throw new SQLException("No se ha creado ningún registro");
		}
		if (resultado > 1) {
			throw new SQLException("Se intentó crear más de un registro");
		}
		return resultado;
	}

	/**
	 * Actualiza los datos de [%=nombreClase%].
	 * @return Un int con el número de registros actualizados
	 * @throws SQLException Si ocurre un error de base de datos al actualizar
	 */
	private int actualizar() throws SQLException {
		DSentenciaSQL sentencia = getSentenciaSQLPreparada("sentencia1");
		asignarValoresObjeto(sentencia);
		asignarValoresPK(sentencia);
		sentencia.ejecutar();
		int resultado = sentencia.getRegistrosAfectados();
		if (resultado <= 0) {
			throw new SQLException("No se ha actualizado ningún registro");
		}
		if (resultado > 1) {
			throw new SQLException("Se intentó actualizar más de un registro");
		}
		return resultado;
	}

	/**
	 * Actualiza los datos de [%=nombreClase%].
	 * @return Un IDDataSet con la colección de registros encontrados
	 * @throws SQLException Si ocurre un error de base de datos al consultar
	 */
	private IDDataSet consultarPorPK() throws SQLException {
		DSentenciaSQL sentencia = getSentenciaSQLPreparada("sentencia1");
		asignarValoresPK(sentencia);
		sentencia.ejecutar();
		DDataSet resultado = sentencia.getDataSet();
		cargar[%=nombreClase%](resultado);
		return resultado;
	}

	/**
	 * Consulta genérica de los datos de [%=nombreClase%].
	 * @return Un IDDataSet con la colección de registros encontrados
	 * @throws SQLException Si ocurre un error de base de datos al consultar
	 */
	private IDDataSet consultaGenerica() throws SQLException {
		DSentenciaSQL sentencia = getSentenciaSQLPreparada("sentencia1");
		asignarValoresGenericos(sentencia);
		sentencia.ejecutar();
		DDataSet resultado = sentencia.getDataSet();
		cargarObjetos[%=nombreClase%](resultado);
		return resultado;
	}

[%=lstMetodosConsultar.concat("\n \t")%]

	/**
	 * Asigna los valores para pk en una sentencia SQL.
	 * @param unaSentencia Sentencia para asignación
	 * @throws SQLException Si ocurre un error al asignar los valores
	 */
	private void asignarValoresPK(DSentenciaSQL unaSentencia) throws SQLException {
		[%
		for(att in pkes.atributos.asOrderedSet()) {				
		%]
			[% if (att.getType() = "java.lang.String") {%]
			unaSentencia.setString("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.lang.Integer") {%]
			unaSentencia.setInt("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.lang.Long") {%]
			unaSentencia.setLong("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.math.BigInteger") {%]
			unaSentencia.setBigInteger("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.lang.Double") {%]
			unaSentencia.setDouble("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.math.BigDecimal") {%]
			unaSentencia.setBigDecimal("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.sql.Date") {%]
			unaSentencia.setDate("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%} else if (att.getType() = "java.sql.Timestamp") {%]
			unaSentencia.setTimestamp("[%=att.nombre%]", pk[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%}%]		
		[%}%]		
	}

	/**
	 * Asigna todos los valores de un objeto.
	 * @param unaSentencia Sentencia para asignación
	 * @throws SQLException Si ocurre un error al asignar los valores
	 */
	private void asignarValoresObjeto(DSentenciaSQL unaSentencia) throws SQLException {
		[%for(att in atribs.atributos.asOrderedSet()) 
			{	
			%]
			[% if (att.nombre<>"NIV_LECTURA" and att.nombre<>"NIV_ESCRITURA" and att.nombre<>"IDE_UUID") {%]
				[% if (att.getType() = "java.lang.String") {%]
				unaSentencia.setString("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Integer") {%]
				unaSentencia.setInt("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Long") {%]
				unaSentencia.setLong("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigInteger") {%]
				unaSentencia.setBigInteger("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.lang.Double") {%]
				unaSentencia.setDouble("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.math.BigDecimal") {%]
				unaSentencia.setBigDecimal("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Date") {%]
				unaSentencia.setDate("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
				[%} else if (att.getType() = "java.sql.Timestamp") {%]
				unaSentencia.setTimestamp("[%=att.nombre%]", att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());				
			[%}}}%]
	}

	/**
	 * Construye un objeto [%=nombreClase%] con base en el data set.
	 * @param resultado Contenedor de los datos
	 * @throws SQLException Si ocurre un error de base de datos al cargar el objeto
	 */
	private void cargar[%=nombreClase%](IDDataSet resultado) throws SQLException {
		if (resultado.getNumeroFilas() == 0) {
			return;
		}
		resultado.primero();
		to[%=nombreClase%] = completar[%=nombreClase%](resultado);
	}

	/**
	 * Construye objetos [%=nombreClase%] con base en el data set.
	 * @param resultado Contenedor de los datos
	 * @throws SQLException Si ocurre un error de base de datos al cargar los objetos
	 */
	private void cargarObjetos[%=nombreClase%](IDDataSet resultado) throws SQLException {
		objetos[%=nombreClase%] = new ArrayList<D[%=nombreClase%]TO>();
		to[%=nombreClase%] = null;
		if (resultado.getNumeroFilas() == 0) {
			return;
		}
		resultado.primero();
		do {
			D[%=nombreClase%]TO objeto = completar[%=nombreClase%](resultado);
			objetos[%=nombreClase%].add(objeto);
		} while (resultado.siguiente());
		resultado.primero();
	}

	/**
	 * Construye un objeto [%=nombreClase%] con base en el data set.
	 * El data set debe contener datos en la posición actual.
	 * @param resultado Contenedor de los datos
	 * @return Un [%=nombreClase%]
	 * @throws SQLException Si ocurre un error de base de datos al cargar el objeto
	 */
	private D[%=nombreClase%]TO completar[%=nombreClase%](IDDataSet resultado) throws SQLException {
		// Conformar el objeto PK
		D[%=nombreClase%]PKTO pk = new D[%=nombreClase%]PKTO();
		[%
		for(att in pkes.atributos.asOrderedSet()) {				
		%]
		//[%=att.getType()%]
		[% if (att.getType() = "java.lang.String") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getString("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Integer") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getIntWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Long") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getLongWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Double") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getDoubleWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.math.BigInteger") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](getBigInteger(resultado.getLongWrapper("[%=att.nombre%]")));
		[%} else if (att.getType() = "java.math.BigDecimal") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%](getBigDecimal(resultado.getDoubleWrapper("[%=att.nombre%]")));
		[%} else if (att.getType() = "java.sql.Date") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%]((Date)resultado.getDate("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.sql.Timestamp") {%]
		pk.set[%=att.nombre.firstToUpperCamelCase()%]((Timestamp)resultado.getDate("[%=att.nombre%]"));
		[%}%]
				
		[%}%]					
		// Conformar el objeto Att
		D[%=nombreClase%]AttTO att = new D[%=nombreClase%]AttTO();
		[%for(att in atribs.atributos.asOrderedSet()) 
			{	
			%]
			[% if (att.nombre<>"NIV_LECTURA" and att.nombre<>"NIV_ESCRITURA" and att.nombre<>"IDE_UUID") {%]
		//[%=att.getType()%]
				[% if (att.getType() = "java.lang.String") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getString("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Integer") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getIntWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Long") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getLongWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.lang.Double") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](resultado.getDoubleWrapper("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.math.BigInteger") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](getBigInteger(resultado.getLongWrapper("[%=att.nombre%]")));
		[%} else if (att.getType() = "java.math.BigDecimal") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%](getBigDecimal(resultado.getDoubleWrapper("[%=att.nombre%]")));
		[%} else if (att.getType() = "java.sql.Date") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%]((Date)resultado.getDate("[%=att.nombre%]"));
		[%} else if (att.getType() = "java.sql.Timestamp") {%]
		att.set[%=att.nombre.firstToUpperCamelCase()%]((Timestamp)resultado.getDate("[%=att.nombre%]"));
		[%}%]
		
				[%}%]
			[%}%]
				
		// Conformar el TO
		D[%=nombreClase%]TO to = new D[%=nombreClase%]TO();
		to.setPK(pk);
		to.setAtt(att);
		return to;
	}

	/**
	 * Devuelve el objeto [%=nombreClase%] que se haya consultado.
	 * @return Un objeto D[%=nombreClase%]TO
	 */
	public D[%=nombreClase%]TO get[%=nombreClase%]() {
		return to[%=nombreClase%];
	}

	/**
	 * Devuelve la colección de objetos [%=nombreClase%] que se hayan consultado.
	 * @return Un Collection con objetos D[%=nombreClase%]TO
	 */
	public Collection<D[%=nombreClase%]TO> getColeccion[%=nombreClase%]() {
		return objetos[%=nombreClase%];
	}

	/**
	 * Indica si el DAO es de ejecución libre.
	 * @return true si es de ejecución libre; false de lo contrario
	 */
	public boolean isEjecucionLibre() {
		return false;
	}

	/**
	 * Método para validar los parámetros inicializados, invocado por el administrador de persistencia.
	 * @return true si los parámetros son válidos; false de lo contrario
	 * @throws DValidarExcepcion Si los parámetros no son válidos
	 * @todo COMPLEMENTAR
	 */
	public boolean validar() throws DValidarExcepcion {
		DManipuladorMensaje manipulador;
		String operacion = null;
		Map<String, Object> parametros=new HashMap<String, Object>();
		switch (getTipoOperacion()) {
			case CREAR: operacion = "la creación"; break;
			case ACTUALIZAR: operacion = "la actualización"; break;
			case ELIMINAR: operacion = "la eliminación"; break;
			case CONSULTAR_POR_PK: operacion = "la consulta"; break;
			case CONSULTA_GENERICA: operacion = "la consulta"; break;
		}

		if (operacion == null) {
			manipulador = new DManipuladorMensaje(IDArqMensajes.ME_OPER_INVALIDA);
			String mensaje = manipulador.getMensaje();
			throw new DValidarExcepcion(mensaje, mensaje);
		}

		if (tipoOperacion == CREAR || tipoOperacion == ACTUALIZAR) {
			parametros.put(this.getClass().getName()+":validar:to[%=nombreClase%]",to[%=nombreClase%]);
			parametros.put(this.getClass().getName()+":validar:pk[%=nombreClase%]",pk[%=nombreClase%]);
			parametros.put(this.getClass().getName()+":validar:att[%=nombreClase%]",att[%=nombreClase%]);
			
			[%for(att in pks) {				
			%]
			parametros.put(this.getClass().getName()+":validar:pk[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]()",pk[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]());
			[%}%]
			[%for(att in atribs.atributos.asOrderedSet()) 
			{%][% if (att.isObligatorio="true" and att.nombre<>"NIV_LECTURA" and att.nombre<>"NIV_ESCRITURA" and att.nombre<>"IDE_UUID") {%]
			parametros.put(this.getClass().getName()+":validar:att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]()",att[%=nombreClase%].get[%=att.nombre.firstToUpperCamelCase()%]());
			[%}%][%}%]			
		}

		if (tipoOperacion == CONSULTAR_POR_PK || tipoOperacion == ELIMINAR) {
			parametros.put(this.getClass().getName()+":validar:pk[%=nombreClase%]",pk[%=nombreClase%]);
			[%for(att in pks) {				
			%]
			parametros.put(this.getClass().getName()+":validar:pk[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]()",pk[%=nombreClase%].get[%=att.firstToUpperCamelCase()%]());
			[%}%]
		}

		if (tipoOperacion == CONSULTA_GENERICA) {
			parametros.put(this.getClass().getName()+":validar:to[%=nombreClase%]",to[%=nombreClase%]);
		}

		[%=lstCaseValidacion.concat(" \n \t \t")%]
		
		validarParametros(operacion,parametros);
		return true;
	}
	
	private java.math.BigInteger getBigInteger(Object value) {
		
		if(value!=null ) {
			return new java.math.BigInteger(value.toString());
		}
		
		return null;		
		
	}
}
 
  
