/*
 * generated by Xtext 2.12.0
 */
package co.gov.dian.xtext.arquitecturadian.dsl.scoping

import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import co.gov.dian.xtext.arquitecturadian.dsl.sql.Column
import co.gov.dian.xtext.arquitecturadian.dsl.sql.ForeignKey
import co.gov.dian.xtext.arquitecturadian.dsl.sql.SqlPackage
import co.gov.dian.xtext.arquitecturadian.dsl.sql.Table

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SqlScopeProvider extends AbstractDeclarativeScopeProvider /*AbstractSqlScopeProvider*/ {
override getScope(EObject context, EReference reference) {
    if (context instanceof ForeignKey && reference==SqlPackage.Literals.FOREIGN_KEY__FOREIGN_COLUMNS) {
    	var Table refForeignTable = (context as ForeignKey).foreignTable;
			//System.out.println(refForeignTable.name);			
			
			for (var i = 0; i < context.eContainer.eContainer.eContents.size(); i++)
			{
				var Table iTable = (context.eContainer.eContainer.eContents.get(i) as Table);
				//System.out.println(iTable.name);
				
				//tabla referenciada, devolver columnas 
				if (iTable.name.equals(refForeignTable.name))
				{
					var EList<Column> cols = iTable.columns;
				 	var EList<Column> columns = new BasicEList<Column>();
				 	for(Column f: cols){
				 		if(f instanceof Column){
				 			columns.add(f);
				 		}
				 	}
					return Scopes::scopeFor(columns);
				}
			}
			
			return null;
       
    }
    return super.getScope(context, reference);
}
}


